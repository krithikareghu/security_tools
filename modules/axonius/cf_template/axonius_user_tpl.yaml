AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template to create IAM role and policies"

Parameters:
  RoleName:
    Type: String
    Description: The name of the IAM Role
    Default: "AxoniusRole"
  UserName:
    Type: String
    Description: The name of the IAM User
    Default: "axonius-user-test"

Resources:
  AxoniusReadonlyPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: "axonius-Readonly-policy-test"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "VisualEditor0"
            Effect: "Allow"
            Action:
                  - "acm:Describe*"
                  - "acm:List*"
                  - "aoss:BatchGet*"
                  - "aoss:List*"
                  - "autoscaling:Describe*"
                  - "batch:Describe*"
                  - "batch:List*"
                  - "bedrock:Get*"
                  - "bedrock:List*"
                  - "cloudformation:Describe*"
                  - "cloudformation:Get*"
                  - "cloudformation:List*"
                  - "cloudfront:Get*"
                  - "cloudfront:ListDistributions*"
                  - "cloudtrail:Describe*"
                  - "cloudtrail:Get*"
                  - "cloudtrail:List*"
                  - "cloudtrail:LookupEvents"
                  - "cloudwatch:Describe*"
                  - "cloudwatch:GetMetric*"
                  - "cloudwatch:ListMetrics"
                  - "cognito-idp:ListResourcesForWebACL"
                  - "cognito-sync:GetCognitoEvents"
                  - "config:Describe*"
                  - "dynamodb:Describe*"
                  - "dynamodb:List*"
                  - "ec2:Describe*"
                  - "ecr:Describe*"
                  - "ecr:GetRegistryScanningConfiguration"
                  - "ecr:GetRepositoryPolicy"
                  - "ecr:List*"
                  - "ecr:StartImageScan"
                  - "ecr-public:Describe*"
                  - "ecr-public:GetRepositoryPolicy"
                  - "ecr-public:List*"
                  - "ecs:Describe*"
                  - "ecs:List*"
                  - "eks:Describe*"
                  - "eks:List*"
                  - "elasticache:Describe*"
                  - "elasticache:List*"
                  - "elasticbeanstalk:Describe*"
                  - "elasticbeanstalk:List*"
                  - "elasticfilesystem:Describe*"
                  - "elasticloadbalancing:Describe*"
                  - "elasticmapreduce:Describe*"
                  - "elasticmapreduce:List*"
                  - "es:Describe*"
                  - "es:List*"
                  - "events:ListRules"
                  - "iam:Generate*"
                  - "iam:Get*"
                  - "iam:List*"
                  - "identitystore:Describe*"
                  - "inspector2:List*"
                  - "iot:GetTopicRule"
                  - "kms:Describe*"
                  - "kms:GetKey*"
                  - "kms:List*"
                  - "kinesis:Describe*"
                  - "kinesis:List*"
                  - "lambda:Get*Policy"
                  - "lambda:GetAccountSettings"
                  - "lambda:List*"
                  - "logs:Describe*"
                  - "organizations:Describe*"
                  - "organizations:List*"
                  - "rds:Describe*"
                  - "rds:List*"
                  - "redshift:Describe*"
                  - "redshift:List*"
                  - "route53:List*"
                  - "s3:Get*"
                  - "s3:List*"
                  - "secretsmanager:Describe*"
                  - "secretsmanager:Get*"
                  - "secretsmanager:List*"
                  - "securityhub:Batch*"
                  - "securityhub:Get*"
                  - "securityhub:List*"
                  - "servicecatalog:List*"
                  - "sns:List*"
                  - "sqs:List*"
                  - "ssm:Describe*"
                  - "ssm:Get*"
                  - "ssm:List*"
                  - "states:List*"
                  - "support:Describe*"
                  - "tag:Get*"
                  - "transfer:List*"
                  - "waf-regional:List*"
                  - "waf:List*"
                  - "workmail:Describe*"
                  - "workmail:List*"
            Resource: "*"

# Assume Role Policy for Management Account (assume permission for the role)
  AxoniusAssumePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: "axonius-assumerole-policy-test"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "VisualEditor0"
            Effect: "Allow"
            Action: "sts:AssumeRole"
            Resource: "arn:aws:iam::*:role/${RoleName}"    # Reference the ARN of the AxoniusRole

  # IAM User in the Management Account
  AxoniusUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Ref UserName
      ManagedPolicyArns:
        - !Ref AxoniusReadonlyPolicy  # Attach the Readonly Policy
        - !Ref AxoniusAssumePolicy   # Attach the Assume Role Policy
  # Define IAM User in the Management Account with inline policies
  
  # AxoniusUser:
  #   Type: AWS::IAM::User
  #   Properties:
  #     UserName: !Ref UserName
  #     Policies:
  #       - PolicyName: "AxoniusReadonlyPolicy"
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Sid: "VisualEditor0"
  #               Effect: "Allow"
  #               Action:
  #                 - "acm:Describe*"
  #                 - "acm:List*"
  #                 - "aoss:BatchGet*"
  #                 - "aoss:List*"
  #                 - "autoscaling:Describe*"
  #                 - "batch:Describe*"
  #                 - "batch:List*"
  #                 - "bedrock:Get*"
  #                 - "bedrock:List*"
  #                 - "cloudformation:Describe*"
  #                 - "cloudformation:Get*"
  #                 - "cloudformation:List*"
  #                 - "cloudfront:Get*"
  #                 - "cloudfront:ListDistributions*"
  #                 - "cloudtrail:Describe*"
  #                 - "cloudtrail:Get*"
  #                 - "cloudtrail:List*"
  #                 - "cloudtrail:LookupEvents"
  #                 - "cloudwatch:Describe*"
  #                 - "cloudwatch:GetMetric*"
  #                 - "cloudwatch:ListMetrics"
  #                 - "cognito-idp:ListResourcesForWebACL"
  #                 - "cognito-sync:GetCognitoEvents"
  #                 - "config:Describe*"
  #                 - "dynamodb:Describe*"
  #                 - "dynamodb:List*"
  #                 - "ec2:Describe*"
  #                 - "ecr:Describe*"
  #                 - "ecr:GetRegistryScanningConfiguration"
  #                 - "ecr:GetRepositoryPolicy"
  #                 - "ecr:List*"
  #                 - "ecr:StartImageScan"
  #                 - "ecr-public:Describe*"
  #                 - "ecr-public:GetRepositoryPolicy"
  #                 - "ecr-public:List*"
  #                 - "ecs:Describe*"
  #                 - "ecs:List*"
  #                 - "eks:Describe*"
  #                 - "eks:List*"
  #                 - "elasticache:Describe*"
  #                 - "elasticache:List*"
  #                 - "elasticbeanstalk:Describe*"
  #                 - "elasticbeanstalk:List*"
  #                 - "elasticfilesystem:Describe*"
  #                 - "elasticloadbalancing:Describe*"
  #                 - "elasticmapreduce:Describe*"
  #                 - "elasticmapreduce:List*"
  #                 - "es:Describe*"
  #                 - "es:List*"
  #                 - "events:ListRules"
  #                 - "iam:Generate*"
  #                 - "iam:Get*"
  #                 - "iam:List*"
  #                 - "identitystore:Describe*"
  #                 - "inspector2:List*"
  #                 - "iot:GetTopicRule"
  #                 - "kms:Describe*"
  #                 - "kms:GetKey*"
  #                 - "kms:List*"
  #                 - "kinesis:Describe*"
  #                 - "kinesis:List*"
  #                 - "lambda:Get*Policy"
  #                 - "lambda:GetAccountSettings"
  #                 - "lambda:List*"
  #                 - "logs:Describe*"
  #                 - "organizations:Describe*"
  #                 - "organizations:List*"
  #                 - "rds:Describe*"
  #                 - "rds:List*"
  #                 - "redshift:Describe*"
  #                 - "redshift:List*"
  #                 - "route53:List*"
  #                 - "s3:Get*"
  #                 - "s3:List*"
  #                 - "secretsmanager:Describe*"
  #                 - "secretsmanager:Get*"
  #                 - "secretsmanager:List*"
  #                 - "securityhub:Batch*"
  #                 - "securityhub:Get*"
  #                 - "securityhub:List*"
  #                 - "servicecatalog:List*"
  #                 - "sns:List*"
  #                 - "sqs:List*"
  #                 - "ssm:Describe*"
  #                 - "ssm:Get*"
  #                 - "ssm:List*"
  #                 - "states:List*"
  #                 - "support:Describe*"
  #                 - "tag:Get*"
  #                 - "transfer:List*"
  #                 - "waf-regional:List*"
  #                 - "waf:List*"
  #                 - "workmail:Describe*"
  #                 - "workmail:List*"
  #               Resource: "*"
  #       - PolicyName: "AxoniusAssumePolicy"
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Sid: "VisualEditor0"
  #               Effect: "Allow"
  #               Action: "sts:AssumeRole"
  #               Resource: "arn:aws:iam::*:role/${RoleName}" # Reference the ARN of the AxoniusRole

  # Role that can be assumed by the Axonius user
  AxoniusAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref AxoniusUser
  
   # access key for the user
  AxoniusSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: "AxoniusUserCredentials"
      Description: "Stores the Access Key and Secret Key for AxoniusUser"
      SecretString: !Sub |
        {
          "AccessKeyId": "${AxoniusAccessKey}",
          "SecretAccessKey": "${AxoniusAccessKey.SecretAccessKey}"
        }
Outputs:
  AccessKeyId:
    Description: "Access Key ID for AxoniusUser"
    Value: !Ref AxoniusAccessKey
    Export:
      Name: "AxoniusUserAccessKeyId"

  SecretAccessKey:
    Description: "Secret Access Key for AxoniusUser"
    Value: !GetAtt AxoniusAccessKey.SecretAccessKey
    Export:
      Name: "AxoniusUserSecretAccessKey"
  
  SecretArn:
    Description: "ARN of the secret storing Axonius user credentials"
    Value: !Ref AxoniusSecret
    Export:
      Name: "AxoniusUserSecretArn"